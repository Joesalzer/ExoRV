geom_point(mapping = aes(x = timeID, y = estimate), size = .8, color = "blue", alpha = .8) +
#geom_point(mapping = aes(x = date, y = se), size = .8, color = "blue", alpha = .8) +
#geom_hline(yintercept = mean(cleanRV_df$se), color = "black", linetype = 2) +
ylab("standard errors")
cleanRV_df %>%
mutate(boot_se = ( boot_se -mean(boot_se) ) / sd(boot_se),
estimate = ( estimate -mean(estimate) ) /sd(estimate)) %>%
ggplot() +
geom_point(mapping = aes(x = estimate, y = boot_se), size = .8, color = "orange", alpha = .8) +
#geom_point(mapping = aes(x = timeID, y = estimate), size = .8, color = "blue", alpha = .8) +
#geom_point(mapping = aes(x = date, y = se), size = .8, color = "blue", alpha = .8) +
#geom_hline(yintercept = mean(cleanRV_df$se), color = "black", linetype = 2) +
ylab("standard errors")
cleanRV_df %>%
ggplot() +
geom_point(mapping = aes(x = timeID, y = boot_se), size = .8, color = "orange", alpha = .8) +
geom_hline(yintercept = mean(cleanRV_df$se), color = "black", linetype = 2) +
ylab("standard errors")
cleanRV_df %>%
mutate(boot_se = ( boot_se -mean(boot_se) ) / sd(boot_se),
estimate = ( estimate -mean(estimate) ) /sd(estimate)) %>%
ggplot() +
geom_point(mapping = aes(x = timeID, y = boot_se), size = .8, color = "orange", alpha = .8) +
geom_point(mapping = aes(x = timeID, y = estimate), size = .8, color = "blue", alpha = .8) +
#geom_point(mapping = aes(x = date, y = se), size = .8, color = "blue", alpha = .8) +
#geom_hline(yintercept = mean(cleanRV_df$se), color = "black", linetype = 2) +
ylab("standard errors")
cat(model_name, "\n",
str_c("coverage 1se: ",
round(mean((cleanRV_df$estimate - cleanRV_df$boot_se < 0) & (cleanRV_df$estimate + cleanRV_df$boot_se > 0)),3),
"\n"),
str_c("coverage 2se: ",
round(mean((cleanRV_df$estimate - 2*cleanRV_df$boot_se < 0) & (cleanRV_df$estimate + 2*cleanRV_df$boot_se > 0)),3),
"\n"))
desired_coverage = .95
mult = 1
current_coverage = mean((cleanRV_df$estimate - mult*cleanRV_df$se < 0) & (cleanRV_df$estimate + mult*cleanRV_df$se > 0))
while(current_coverage < desired_coverage) {
mult = mult+.001
current_coverage = mean((cleanRV_df$estimate - mult*cleanRV_df$se < 0) & (cleanRV_df$estimate + mult*cleanRV_df$se > 0))
}
print(mult)
print(current_coverage)
# mean se
mean(cleanRV_df$se)
# CI length at desired level of coverage
summary(2*mult*cleanRV_df$se)
desired_coverage = .99
mult = 1
current_coverage = mean((cleanRV_df$estimate - mult*cleanRV_df$se < 0) & (cleanRV_df$estimate + mult*cleanRV_df$se > 0))
while(current_coverage < desired_coverage) {
mult = mult+.001
current_coverage = mean((cleanRV_df$estimate - mult*cleanRV_df$se < 0) & (cleanRV_df$estimate + mult*cleanRV_df$se > 0))
}
print(mult)
print(current_coverage)
# mean se
mean(cleanRV_df$se)
# CI length at desired level of coverage
summary(2*mult*cleanRV_df$se)
rm(desired_coverage, mult, current_coverage)
desired_coverage = .99
mult = 1
current_coverage = mean((cleanRV_df$estimate - mult*cleanRV_df$boot_se < 0) & (cleanRV_df$estimate + mult*cleanRV_df$boot_se > 0))
while(current_coverage < desired_coverage) {
mult = mult+.001
current_coverage = mean((cleanRV_df$estimate - mult*cleanRV_df$boot_se < 0) & (cleanRV_df$estimate + mult*cleanRV_df$boot_se > 0))
}
print(mult)
print(current_coverage)
# mean se
mean(cleanRV_df$boot_se)
# mean CI length at desired level of coverage
summary(2*mult*cleanRV_df$boot_se)
rm(desired_coverage, mult, current_coverage)
pnorm(1)
1-0.8413447
1-2*0.1586553
knitr::opts_chunk$set(echo = TRUE)
library(pbmcapply)
library(plotly)
source("/Users/josephsalzer/research/exostat/readSpectra.R")
source("embed_functions.R")
# working directory
wd = "/Users/josephsalzer/research/exostat/"
# max number of dimensions to embed into
NUM_DIM = 14
# initialize rv + embedding dataframe
rv_df = data.frame()
for (fileID in 6:9) {
# read in the distance matrix, rv matrix and rv estimate
distance_matrix = readRDS(str_c("lines/",fit_lines_list[fileID],"/distanceCCF_mat.rds"))
rv_matrix = readRDS(str_c("lines/",fit_lines_list[fileID],"/rvCCF_mat.rds"))
rv_estimate = apply( rv_matrix, 2, mean )
timeIDs = as.Date(names(rv_estimate))
# from the distance matrix, use a heat kernel to create a similarity matrix, using the median distance as the scaling parameter
heat_scale = median(distance_matrix[upper.tri(distance_matrix)])
heat_sim_mat = exp( -distance_matrix^2 / (2 * heat_scale^2))
# preform the ASE, getting the embedding and eigenvalues and attaching to the attribute dataframe
adjEmbedding = adj_embed(heat_sim_mat, NUM_DIM)
# bind new data
rv_df = data.frame(adjEmbedding$embedding) %>%
mutate(date = timeIDs,
rv = rv_estimate,
line_order = fit_lines_list[fileID]) %>%
rbind(rv_df)
rm(distance_matrix,rv_matrix,timeIDs,heat_scale,heat_sim_mat,adjEmbedding)
}
# list of files in raw_spectrum_files
raw_spectrum_files_list = list.files(str_c(wd,"raw_spectrum_files"))
# list of solar spectrum files
solarspectrum_list = raw_spectrum_files_list[!is.na( str_extract(raw_spectrum_files_list,"solar_spectrum") )]
# get dates for solar spectrum
all_dates = str_sub( str_split_fixed(solarspectrum_list,"_",n=3)[,3], end = -4 )
# list of line property files
lineProp_list = list.files(str_c(wd,"line_property_files"))
# list of lines that have been fit by splines
fit_lines_list = list.files("lines")
for (fileID in 6:9) {
# read in the distance matrix, rv matrix and rv estimate
distance_matrix = readRDS(str_c("lines/",fit_lines_list[fileID],"/distanceCCF_mat.rds"))
rv_matrix = readRDS(str_c("lines/",fit_lines_list[fileID],"/rvCCF_mat.rds"))
rv_estimate = apply( rv_matrix, 2, mean )
timeIDs = as.Date(names(rv_estimate))
# from the distance matrix, use a heat kernel to create a similarity matrix, using the median distance as the scaling parameter
heat_scale = median(distance_matrix[upper.tri(distance_matrix)])
heat_sim_mat = exp( -distance_matrix^2 / (2 * heat_scale^2))
# preform the ASE, getting the embedding and eigenvalues and attaching to the attribute dataframe
adjEmbedding = adj_embed(heat_sim_mat, NUM_DIM)
# bind new data
rv_df = data.frame(adjEmbedding$embedding) %>%
mutate(date = timeIDs,
rv = rv_estimate,
line_order = fit_lines_list[fileID]) %>%
rbind(rv_df)
rm(distance_matrix,rv_matrix,timeIDs,heat_scale,heat_sim_mat,adjEmbedding)
}
rv_df = rv_df %>%
mutate(lineID = factor(line_order),
timeID = factor(date))
contrasts(rv_df$lineID) = contr.sum
contrasts(rv_df$timeID) = contr.sum
standardize(rv_df,covariates = str_c("X",1:12), response = "rv", lineIDname = "lineID")
rv_df = standardize(rv_df,covariates = str_c("X",1:NUM_DIM), response = "rv", lineIDname = "lineID")$train.df
# full model
ccf_lm = lm(rv ~ timeID + lineID + X1_centered:lineID + X2_centered:lineID+ X3_centered:lineID+ X5_centered:lineID + X6_centered:lineID + X8_centered:lineID + X9_centered:lineID + X10_centered:lineID + X11_centered:lineID, rv_df)
coefs_ = ccf_lm$coefficients
alphas = coefs_[startsWith( names(coefs_), "timeID" )]
alphas = c(alphas,-sum(alphas))
rmse_t(0,alphas)
summary(ccf_lm)
summary(ccf_lm)$coefficients
coef_df = summary(ccf_lm)$coefficients
rownames(coef_df)
coef_df = summary(ccf_lm)$coefficients
tail(coef_df)
coef_df = summary(ccf_lm)$coefficients
tail(coef_df,10)
rv_df
rv_df %>%
filter(lineID=="5394.66649_60")
rv_df %>%
filter(lineID=="5394.66649_60")
rv_df %>%
filter(lineID=="5394.66649_60") %>%
ggplot() +
geom_point(mapping = aes(x = date, y = X1))
rv_df %>%
filter(lineID=="5394.66649_60") %>%
ggplot() +
geom_point(mapping = aes(x = date, y = X2))
rv_df %>%
filter(lineID=="5394.66649_60") %>%
ggplot() +
geom_point(mapping = aes(x = date, y = X3))
rv_df %>%
filter(lineID=="5394.66649_60") %>%
ggplot() +
geom_point(mapping = aes(x = X1, y = rv))
rv_df %>%
filter(lineID=="5394.66649_60") %>%
ggplot() +
geom_point(mapping = aes(x = X2, y = rv))
rv_df %>%
filter(lineID=="5394.66649_60") %>%
ggplot() +
geom_point(mapping = aes(x = X3, y = rv))
rv_df %>%
filter(lineID=="5394.66649_60") %>%
ggplot() +
geom_point(mapping = aes(x = X4, y = rv))
rv_df %>%
filter(lineID=="5394.66649_60") %>%
ggplot() +
geom_point(mapping = aes(x = X5, y = rv))
rv_df %>%
filter(lineID=="5394.66649_60") %>%
ggplot() +
geom_point(mapping = aes(x = X6, y = rv))
rv_df %>%
filter(lineID=="5394.66649_60") %>%
ggplot() +
geom_point(mapping = aes(x = X7, y = rv))
rv_df %>%
filter(lineID=="5394.66649_60") %>%
ggplot() +
geom_point(mapping = aes(x = X8, y = rv))
rv_df %>%
filter(lineID=="5394.66649_60") %>%
ggplot() +
geom_point(mapping = aes(x = X9, y = rv))
?select_if
rv_df %>%
filter(lineID=="5394.66649_60") %>%
select_if(starts_with("X"))
rv_df %>%
filter(lineID=="5394.66649_60") %>%
select_if(vars(starts_with("X")))
rv_df %>%
filter(lineID=="5394.66649_60") %>%
select_at(vars(starts_with("X")))
X = rv_df %>%
filter(lineID=="5394.66649_60") %>%
select_at(vars(starts_with("X")))
X = X[,1:5]
X
rnorm(5)
?svd
d = 5
Matrix( rnorm(d^2), nrow = d, ncol = d )
d = 5
svd( Matrix( rnorm(d^2), nrow = d, ncol = d ) )
d = 5
U = svd( Matrix( rnorm(d^2), nrow = d, ncol = d ) )$u
t(U) %*% U
d = 5
U = svd( Matrix( rnorm(d^2), nrow = d, ncol = d ) )$u
crossprod(U)
t(U) %*% U
d = 5
U = Matrix( svd( Matrix( rnorm(d^2), nrow = d, ncol = d ) )$u )
crossprod(U)
d = 5
U = svd( Matrix( rnorm(d^2), nrow = d, ncol = d ) )$u
crossprod(U)
d = 357
U = svd( Matrix( rnorm(d^2), nrow = d, ncol = d ) )$u
crossprod(U)
d = 357
U = svd( Matrix( rnorm(d^2), nrow = d, ncol = d ) )$u
crossprod(U)[1:5,1:5]
set.seed(123)
# get an arbitrary rotation matrix
d = 357
W = svd( Matrix( rnorm(d^2), nrow = d, ncol = d ) )$u
rm(d)
W %*% X
X = rv_df %>%
filter(lineID=="5394.66649_60") %>%
select_at(vars(starts_with("X")))
X = X[,1:5]
X
set.seed(123)
# get an arbitrary rotation matrix
d = 357
W = svd( Matrix( rnorm(d^2), nrow = d, ncol = d ) )$u
rm(d)
W %*% X
X = rv_df %>%
filter(lineID=="5394.66649_60") %>%
select_at(vars(starts_with("X")))
X = Matrix( X[,1:5] )
X = rv_df %>%
filter(lineID=="5394.66649_60") %>%
select_at(vars(starts_with("X")))
X = Matrix( data = X[,1:5] )
X = rv_df %>%
filter(lineID=="5394.66649_60") %>%
select_at(vars(starts_with("X")))
X = as.matrix( data = X[,1:5] )
X = rv_df %>%
filter(lineID=="5394.66649_60") %>%
select_at(vars(starts_with("X")))
X = as.matrix( X[,1:5] )
X
X = rv_df %>%
filter(lineID=="5394.66649_60") %>%
select_at(vars(starts_with("X")))
X = as.matrix( X[,1:5] )
head(X)
set.seed(123)
# get an arbitrary rotation matrix
d = 357
W = svd( Matrix( rnorm(d^2), nrow = d, ncol = d ) )$u
rm(d)
W %*% X
X_star = W %*% X
ggplot() +
geom_point(mapping = aes(x = X_star[,1], y = X_star[,2]))
ggplot() +
geom_point(mapping = aes(x = X[,1], y = X[,2]))
ggplot() +
geom_point(mapping = aes(x = X_star[,1], y = X_star[,2]))
solve(W)
solve(W)[1:5,1:5]
t(W)[1:5,1:5]
solve(W)[1:5,1:5]
ggplot() +
geom_point(mapping = aes(x = X[,1], y = X[,2]))
ggplot() +
geom_point(mapping = aes(x = X_star[,1], y = X_star[,2]))
ggplot() +
geom_point(mapping = aes(x = X_star[,2], y = X_star[,3]))
ggplot() +
geom_point(mapping = aes(x = X[,1], y = X[,2]))
ggplot() +
geom_point(mapping = aes(x = X[,1], y = X[,3]))
ggplot() +
geom_point(mapping = aes(x = X_star[,1], y = X_star[,2]))
ggplot() +
geom_point(mapping = aes(x = X_star[,2], y = X_star[,3]))
ggplot() +
geom_point(mapping = aes(x = X[,1], y = X[,2]))
ggplot() +
geom_point(mapping = aes(x = X[,1], y = X_star[,1]))
ggplot() +
geom_point(mapping = aes(x = X[,1], y = X[,3]))
ggplot() +
geom_point(mapping = aes(x = X_star[,1], y = X_star[,2]))
ggplot() +
geom_point(mapping = aes(x = X_star[,2], y = X_star[,3]))
X = rv_df %>%
filter(lineID=="5394.66649_60") %>%
select_at(vars(starts_with("X")))
X = as.matrix( X[,1:2] )
head(X)
set.seed(123)
# get an arbitrary rotation matrix
d = 357
W = svd( Matrix( rnorm(d^2), nrow = d, ncol = d ) )$u
rm(d)
# rotate X
X_star = W %*% X
ggplot() +
geom_point(mapping = aes(x = X[,1], y = X[,2]))
ggplot() +
geom_point(mapping = aes(x = X_star[,1], y = X_star[,2]))
ggplot() +
geom_point(mapping = aes(x = X[,1], y = X[,2]))
ggplot() +
geom_point(mapping = aes(x = X[,1], y = X_star[,1]))
ggplot() +
geom_point(mapping = aes(x = X_star[,1], y = X_star[,2]))
ggplot() +
geom_point(mapping = aes(x = X[,1], y = X[,2]))
ggplot() +
geom_point(mapping = aes(x = X[,1], y = X_star[,1]))
ggplot() +
geom_point(mapping = aes(x = X[,2], y = X_star[,2]))
ggplot() +
geom_point(mapping = aes(x = X_star[,1], y = X_star[,2]))
W = Matrix( c(0,1,1,0), nrow = 2)
W
set.seed(123)
# get an arbitrary rotation matrix
d = 2
W = svd( Matrix( rnorm(d^2), nrow = d, ncol = d ) )$u
rm(d)
# rotate X
X_star = W %*% X
set.seed(123)
# get an arbitrary rotation matrix
d = 2
W = svd( Matrix( rnorm(d^2), nrow = d, ncol = d ) )$u
rm(d)
# rotate X
X_star = X %*% W
ggplot() +
geom_point(mapping = aes(x = X[,1], y = X[,2]))
ggplot() +
geom_point(mapping = aes(x = X[,1], y = X_star[,1]))
ggplot() +
geom_point(mapping = aes(x = X[,2], y = X_star[,2]))
ggplot() +
geom_point(mapping = aes(x = X_star[,1], y = X_star[,2]))
set.seed(123)
# get an arbitrary rotation matrix
d = 2
W = svd( Matrix( rnorm(d^2), nrow = d, ncol = d ) )$u
rm(d)
# rotate X
X_star = X %*% W
ggplot() +
geom_point(mapping = aes(x = X[,1], y = X[,2]))
ggplot() +
geom_point(mapping = aes(x = X[,1], y = X_star[,1]))
ggplot() +
geom_point(mapping = aes(x = X[,2], y = X_star[,2]))
ggplot() +
geom_point(mapping = aes(x = X_star[,1], y = X_star[,2]))
set.seed(123)
# get an arbitrary rotation matrix
d = 2
W = svd( Matrix( rnorm(d^2), nrow = d, ncol = d ) )$u
W
rm(d)
# rotate X
X_star = X %*% W
ggplot() +
geom_point(mapping = aes(x = X[,1], y = X[,2]))
ggplot() +
geom_point(mapping = aes(x = X[,1], y = X_star[,1]))
ggplot() +
geom_point(mapping = aes(x = X[,2], y = X_star[,2]))
ggplot() +
geom_point(mapping = aes(x = X_star[,1], y = X_star[,2]))
set.seed(123)
# get an arbitrary rotation matrix
d = 2
W = svd( Matrix( rnorm(d^2), nrow = d, ncol = d ) )$u
W
rm(d)
#set.seed(123)
# get an arbitrary rotation matrix
d = 2
W = svd( Matrix( rnorm(d^2), nrow = d, ncol = d ) )$u
W
rm(d)
# rotate X
X_star = X %*% W
ggplot() +
geom_point(mapping = aes(x = X[,1], y = X[,2]))
ggplot() +
geom_point(mapping = aes(x = X[,1], y = X_star[,1]))
ggplot() +
geom_point(mapping = aes(x = X[,2], y = X_star[,2]))
ggplot() +
geom_point(mapping = aes(x = X_star[,1], y = X_star[,2]))
X = rv_df %>%
filter(lineID=="5394.66649_60") %>%
select_at(vars(starts_with("X")))
X = as.matrix( X[,1:5] )
head(X)
#set.seed(123)
# get an arbitrary rotation matrix
d = 5
W = svd( Matrix( rnorm(d^2), nrow = d, ncol = d ) )$u
W
rm(d)
# rotate X
X_star = X %*% W
ggplot() +
geom_point(mapping = aes(x = X[,1], y = X[,2]))
ggplot() +
geom_point(mapping = aes(x = X[,1], y = X_star[,1]))
ggplot() +
geom_point(mapping = aes(x = X[,2], y = X_star[,2]))
ggplot() +
geom_point(mapping = aes(x = X_star[,1], y = X_star[,2]))
X = rv_df %>%
filter(lineID=="5394.66649_60") %>%
select_at(vars(starts_with("X")))
X = as.matrix( X[,1:5] )
head(X)
X = rv_df %>%
filter(lineID=="5394.66649_60") %>%
select_at(vars(starts_with("X")))
y = rv_df %>%
filter(lineID=="5394.66649_60") %>%
pull(y)
X = rv_df %>%
filter(lineID=="5394.66649_60") %>%
select_at(vars(starts_with("X")))
y = rv_df %>%
filter(lineID=="5394.66649_60") %>%
pull(rv)
X = as.matrix( X[,1:5] )
head(X)
y
X = rv_df %>%
filter(lineID=="5394.66649_60") %>%
select_at(vars(starts_with("X")))
y = rv_df %>%
filter(lineID=="5394.66649_60") %>%
pull(rv)
X = as.matrix( X[,1:5] )
head(X)
head(y)
#set.seed(123)
# get an arbitrary rotation matrix
d = 5
W = svd( Matrix( rnorm(d^2), nrow = d, ncol = d ) )$u
W
rm(d)
# rotate X
X_star = X %*% W
ggplot() +
geom_point(mapping = aes(x = X[,1], y = X[,2]))
ggplot() +
geom_point(mapping = aes(x = X_star[,1], y = X_star[,2]))
lm(y ~ X)
summary( lm(y ~ X) )
summary( lm(y ~ X) )
summary( lm(y ~ X_star) )
summary( lm(y ~ X) )
summary( lm(y ~ X_star) )
resid( lm(y ~ X) )
resid( lm(y ~ X_star) )
summary( lm(y ~ X) )
summary( lm(y ~ X_star) )
head( resid( lm(y ~ X) ) )
head( resid( lm(y ~ X_star) ) )
