#geom_errorbar(aes(ymin = estimate - 1.96*se, ymax = estimate + 1.96*se)) +
geom_hline(yintercept = 0, color = "red")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stringr)
library(readxl)
library(lme4)
library(MASS)
library(gridExtra)
library(car)
library(glmnet)
## Data directory
wd_data = "/Users/josephsalzer/research/exostat/"
final_fits = tibble( read.csv(str_c(wd_data, "final_fits_6kmps.csv") ) ) %>%
mutate( obs_date = as.Date(obs_date) ) %>%
mutate( lambda = factor(lambda) )
final_fits
final_fits = final_fits %>%
filter(lambda != 4662.822)
# scale non-categorical variables and combine datasets
scaled_final_fits = cbind(
final_fits %>% dplyr::select(c(rv,lambda,order_idx,obs_date,repeat_order)),
final_fits %>%
dplyr::select(!c(rv,lambda,order_idx,obs_date,repeat_order)) %>%
scale() %>%
as_tibble()
)
# convert lambda, date, and order_idx to factors remove repeat_orders
# also create column of centered rv by lambda
scaled_final_fits = scaled_final_fits %>%
mutate(lambda = factor(lambda),
order_idx = factor(order_idx),
obs_date = factor(obs_date) ) %>%
group_by(lambda, order_idx) %>%
mutate(centered_rv = rv - mean(rv)) %>%
ungroup() %>%
dplyr::select(!c(repeat_order))
scaled_final_fits
scaled_final_fits %>% dplyr::select(lambda, rv, centered_rv)
# list of lambdas in final_fits
final_lams = ( scaled_final_fits %>% group_by(lambda) %>% summarize(n. = n()) )$lambda
length(final_lams)
# create vector of response variable
centered_rv = ( scaled_final_fits %>% drop_na() )$centered_rv
# placeholder lm model to find out which categories are non-singular
lm.test = lm(( scaled_final_fits %>% drop_na() )$rv ~ lambda + order_idx + obs_date, data = scaled_final_fits )
# remove non-singular categories and create a dataframe out of them
cat.df = as_tibble( model.matrix(~ lambda + order_idx + obs_date, data = scaled_final_fits %>% drop_na()) ) %>%
dplyr::select(!attributes(alias(lm.test)$Complete)$dimnames[[1]]) %>%
dplyr::select(!"(Intercept)")
rm(lm.test)
# covariates not-including categorical variables
covar.df = scaled_final_fits %>%
dplyr::select(gh_0, gh_2, gh_3, gh_4, gh_5 , gh_6 , gh_7 , gh_8 , gh_9 , gh_10 , gh_11 , gh_12,
snr, a1, depth1, width1, b1) %>%
drop_na()
# combine categorical and non-categorical variables into one matrix
# non-categorical vars appear before categorical vars
Xlasso = data.matrix( cbind(covar.df,cat.df) )
dim(Xlasso)
# number of covariates
n.covar = dim(covar.df)[2]
n.covar
# number of categories
n.cat = ncol(Xlasso) - n.covar
n.cat
# cv lasso, penalty factor means we only have penalties on non-categorical vars
cv_model1 = cv.glmnet(Xlasso,
centered_rv,
penalty.factor = c( rep(1,n.covar), rep(0,n.cat)),
alpha = 1)
cv_model1$lambda.min
plot(cv_model1)
# create the best model using the min lambda
best.model1 = glmnet(Xlasso,
centered_rv,
penalty.factor = c( rep(1,n.covar), rep(0,n.cat)),
alpha = 1,
lambda = cv_model1$lambda.min)
# look at coeficients of non-cat vars
head( coef(best.model1), n.covar + 1 )
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stringr)
library(readxl)
library(lme4)
library(MASS)
library(gridExtra)
## Data directory
wd_data = "/Users/josephsalzer/research/exostat/neid_solar/"
# solar line fits has lambda, depth and width measurements
solar_line_fits = read_csv(str_c(wd_data, "solar_line_fits_20230215.csv")) %>%
rename(lam_c1 = "λc1") %>%
#mutate(lambda = round(lambda,3)) %>%
mutate(obs_date = as.Date(obs_date))
solar_line_fits
# look at various lambdas
solar_line_fits %>%
filter(lambda == solar_line_fits$lambda[3])
# dplyr::select only necessary columns
solar_line_fits = solar_line_fits %>%
dplyr::select(lambda,order_idx,obs_date,snr,a1,lam_c1,depth1,width1,b1)
solar_line_fits
gh_fits1 = read.csv(str_c(wd_data, "gh_fits_Vald=0.01_overlapcutoff=3.0e-5_rejectTelluricSlope=10000.csv")) %>%
mutate(obs_date = as.Date(obs_date)) %>%
mutate(lambda = round(lambda,3)) %>%
arrange(lambda)
gh_fits1
gh_fits2 = read.csv(str_c(wd_data, "gh_fits_Vald=0.01_overlapcutoff=3.0e-5_rejectTelluricSlope=10000_DeltaV=6kmps.csv")) %>%
mutate(obs_date = as.Date(obs_date)) %>%
#mutate(lambda = round(lambda,3)) %>%
arrange(lambda)
gh_fits2
solar_line_fits %>%
group_by(lambda) %>%
summarize(num = n())
solar_line_fits %>%
group_by(lambda) %>%
summarize(num = n()) %>%
count(num)
gh_fits1 %>%
group_by(lambda) %>%
summarize(num = n())
gh_fits1 %>%
group_by(lambda) %>%
summarize(num = n()) %>%
count(num)
gh_fits2 %>%
group_by(lambda) %>%
summarize(num = n())
gh_fits2 %>%
group_by(lambda) %>%
summarize(num = n()) %>%
count(num)
# get all unique lines in gh_fits1 and solar_line_fits
gh_lambdas = ( gh_fits1 %>% group_by(lambda) %>% summarize(num = n()) )$lambda
solar_lambdas = ( solar_line_fits %>% group_by(lambda) %>% summarize(num = n()) )$lambda
# 0 lines appear in gh_fits1 but not solar_line_fits
length( setdiff(gh_lambdas,solar_lambdas) )
# 517 lines appear in solar_line_fits but not gh_fits
length( setdiff(solar_lambdas,gh_lambdas) )
# 248 lines appear in both solar_line_fits and gh_fits
length( intersect(solar_lambdas,gh_lambdas) )
# solar line fits has lambda, depth and width measurements
solar_line_fits = read_csv(str_c(wd_data, "solar_line_fits_20230215.csv")) %>%
rename(lam_c1 = "λc1") %>%
mutate(lambda = round(lambda,3)) %>%
mutate(obs_date = as.Date(obs_date))
solar_line_fits
gh_fits2 = read.csv(str_c(wd_data, "gh_fits_Vald=0.01_overlapcutoff=3.0e-5_rejectTelluricSlope=10000_DeltaV=6kmps.csv")) %>%
mutate(obs_date = as.Date(obs_date)) %>%
mutate(lambda = round(lambda,3)) %>%
arrange(lambda)
gh_fits2
# get all unique lines in gh_fits1 and solar_line_fits
gh_lambdas = ( gh_fits1 %>% group_by(lambda) %>% summarize(num = n()) )$lambda
solar_lambdas = ( solar_line_fits %>% group_by(lambda) %>% summarize(num = n()) )$lambda
# 0 lines appear in gh_fits1 but not solar_line_fits
length( setdiff(gh_lambdas,solar_lambdas) )
# 517 lines appear in solar_line_fits but not gh_fits
length( setdiff(solar_lambdas,gh_lambdas) )
# 248 lines appear in both solar_line_fits and gh_fits
length( intersect(solar_lambdas,gh_lambdas) )
# get all unique lines in gh_fits2 and solar_line_fits
gh_lambdas = ( gh_fits2 %>% group_by(lambda) %>% summarize(num = n()) )$lambda
solar_lambdas = ( solar_line_fits %>% group_by(lambda) %>% summarize(num = n()) )$lambda
# 0 lines appear in gh_fits2 but not solar_line_fits
length( setdiff(gh_lambdas,solar_lambdas) )
# 517 lines appear in solar_line_fits but not gh_fits2
length( setdiff(solar_lambdas,gh_lambdas) )
# 248 lines sappear in both solar_line_fits and gh_fits2
length( intersect(solar_lambdas,gh_lambdas) )
# solar line fits has lambda, depth and width measurements
solar_line_fits = read_csv(str_c(wd_data, "solar_line_fits_20230215.csv")) %>%
rename(lam_c1 = "λc1") %>%
mutate(lambda = round(lambda,4)) %>%
mutate(obs_date = as.Date(obs_date))
solar_line_fits
gh_fits2 = read.csv(str_c(wd_data, "gh_fits_Vald=0.01_overlapcutoff=3.0e-5_rejectTelluricSlope=10000_DeltaV=6kmps.csv")) %>%
mutate(obs_date = as.Date(obs_date)) %>%
mutate(lambda = round(lambda,4)) %>%
arrange(lambda)
gh_fits2
# get all unique lines in gh_fits1 and solar_line_fits
gh_lambdas = ( gh_fits1 %>% group_by(lambda) %>% summarize(num = n()) )$lambda
solar_lambdas = ( solar_line_fits %>% group_by(lambda) %>% summarize(num = n()) )$lambda
# 0 lines appear in gh_fits1 but not solar_line_fits
length( setdiff(gh_lambdas,solar_lambdas) )
# 517 lines appear in solar_line_fits but not gh_fits
length( setdiff(solar_lambdas,gh_lambdas) )
# 248 lines appear in both solar_line_fits and gh_fits
length( intersect(solar_lambdas,gh_lambdas) )
# get all unique lines in gh_fits2 and solar_line_fits
gh_lambdas = ( gh_fits2 %>% group_by(lambda) %>% summarize(num = n()) )$lambda
solar_lambdas = ( solar_line_fits %>% group_by(lambda) %>% summarize(num = n()) )$lambda
# 0 lines appear in gh_fits2 but not solar_line_fits
length( setdiff(gh_lambdas,solar_lambdas) )
# 517 lines appear in solar_line_fits but not gh_fits2
length( setdiff(solar_lambdas,gh_lambdas) )
# 248 lines sappear in both solar_line_fits and gh_fits2
length( intersect(solar_lambdas,gh_lambdas) )
# solar line fits has lambda, depth and width measurements
solar_line_fits = read_csv(str_c(wd_data, "solar_line_fits_20230215.csv")) %>%
rename(lam_c1 = "λc1") %>%
#mutate(lambda = round(lambda,3)) %>%
mutate(lambda = factor(lambda)) %>%
mutate(obs_date = as.Date(obs_date))
solar_line_fits
gh_fits2 = read.csv(str_c(wd_data, "gh_fits_Vald=0.01_overlapcutoff=3.0e-5_rejectTelluricSlope=10000_DeltaV=6kmps.csv")) %>%
mutate(obs_date = as.Date(obs_date)) %>%
#mutate(lambda = round(lambda,3)) %>%
mutate(lambda = factor(lambda)) %>%
arrange(lambda)
gh_fits2
# get all unique lines in gh_fits1 and solar_line_fits
gh_lambdas = ( gh_fits1 %>% group_by(lambda) %>% summarize(num = n()) )$lambda
solar_lambdas = ( solar_line_fits %>% group_by(lambda) %>% summarize(num = n()) )$lambda
# 0 lines appear in gh_fits1 but not solar_line_fits
length( setdiff(gh_lambdas,solar_lambdas) )
# 517 lines appear in solar_line_fits but not gh_fits
length( setdiff(solar_lambdas,gh_lambdas) )
# 248 lines appear in both solar_line_fits and gh_fits
length( intersect(solar_lambdas,gh_lambdas) )
# get all unique lines in gh_fits2 and solar_line_fits
gh_lambdas = ( gh_fits2 %>% group_by(lambda) %>% summarize(num = n()) )$lambda
solar_lambdas = ( solar_line_fits %>% group_by(lambda) %>% summarize(num = n()) )$lambda
# 0 lines appear in gh_fits2 but not solar_line_fits
length( setdiff(gh_lambdas,solar_lambdas) )
# 517 lines appear in solar_line_fits but not gh_fits2
length( setdiff(solar_lambdas,gh_lambdas) )
# 248 lines sappear in both solar_line_fits and gh_fits2
length( intersect(solar_lambdas,gh_lambdas) )
# read pred.df
pred.df = read.csv(str_c(wd_data, "cv_pred.csv"))
# read pred.df
pred.df = read.csv(str_c(wd_data, "cv_pred.csv"))
pred.df
#png(filename="crossval_lodo.png", width=1000, height=500)
pred.df %>%
ggplot(mapping = aes(x = pred_rv, y = true_rv, color = order_idx )) +
geom_point() +
geom_abline(slope=1,intercept=0,linetype = 2)
#dev.off()
# snr*(predicted_rv - actual_rv) histogram
pred.df %>%
ggplot(mapping = aes(x = snr*(pred_rv-true_rv))) +
geom_histogram()
pred.df %>%
ggplot(mapping = aes(x = snr, y = abs(pred_rv-true_rv), color = as.numeric(lambda)) ) +
geom_point()
sqrt( mean( (pred.df$true_rv - pred.df$pred_rv)^2 ) )
mean( abs(pred.df$true_rv - pred.df$pred_rv) )
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stringr)
library(readxl)
library(lme4)
library(MASS)
library(gridExtra)
library(car)
library(glmnet)
## Data directory
wd_data = "/Users/josephsalzer/research/exostat/"
final_fits = tibble( read.csv(str_c(wd_data, "final_fits_6kmps.csv") ) ) %>%
mutate( obs_date = as.Date(obs_date) ) %>%
mutate( lambda = factor(lambda) )
final_fits
final_fits = final_fits %>%
filter(lambda != 4662.822)
# scale non-categorical variables and combine datasets
scaled_final_fits = cbind(
final_fits %>% dplyr::select(c(rv,lambda,order_idx,obs_date,repeat_order)),
final_fits %>%
dplyr::select(!c(rv,lambda,order_idx,obs_date,repeat_order)) %>%
scale() %>%
as_tibble()
)
# convert lambda, date, and order_idx to factors remove repeat_orders
# also create column of centered rv by lambda
scaled_final_fits = scaled_final_fits %>%
mutate(lambda = factor(lambda),
order_idx = factor(order_idx),
obs_date = factor(obs_date) ) %>%
group_by(lambda, order_idx) %>%
mutate(centered_rv = rv - mean(rv)) %>%
ungroup() %>%
dplyr::select(!c(repeat_order))
scaled_final_fits
scaled_final_fits %>% dplyr::select(lambda, rv, centered_rv)
# list of lambdas in final_fits
final_lams = ( scaled_final_fits %>% group_by(lambda) %>% summarize(n. = n()) )$lambda
length(final_lams)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stringr)
library(readxl)
library(lme4)
library(MASS)
library(gridExtra)
## Data directory
wd_data = "/Users/josephsalzer/research/exostat/neid_solar/"
# read in neid_linefinder
line_fits = read_csv(str_c(wd_data, "neid_linefinder_line_fits.csv")) %>%
rename(fit_lam_c = "fit_λc",
fit_sig2 = "fit_σ²",
chi2_per_dof = "χ²_per_dof") %>%
dplyr::select(line_id, pixels)
line_fits
# create matrix of starting pixel (1st col) and ending pixel (2nd col)
pixel_mat = matrix( as.numeric( str_split(line_fits$pixels, regex(":"), simplify = T) ), ncol = 2, byrow = F )
# create col of middle pixel
line_fits$mid_pixel = ( pixel_mat[,2] + pixel_mat[,1] )/2
# remove pixel_mat
rm(pixel_mat)
# denote m_pixel as the first row's middle pixel
line_fits = line_fits %>%
group_by(line_id) %>%
summarize(m_pixel = mid_pixel[1]) %>%
ungroup()
line_fits
pixel.df = line_fits %>%
right_join(
read_csv(str_c(wd_data, "linelist_20210527_rll_overlap=1_slope=10000_quant=90_norm=cont_mask=3.csv")) %>% dplyr::select(line_id, lambda),
by = "line_id" ) %>%
dplyr::select(!line_id)
pixel.df
rm(line_fits, pixel.df)
#bisectors_test = read.csv("bisectors_test.csv")
#bisectors_test
#final_fits %>%
#  left_join(pixel.df, by = "lambda") %>%
#  dplyr::select(lambda, order_idx, obs_date, m_pixel)
# solar line fits has lambda, depth and width measurements
solar_line_fits = read_csv(str_c(wd_data, "solar_line_fits_20230215.csv")) %>%
rename(lam_c1 = "λc1") %>%
mutate(lambda = round(lambda,3)) %>%
#mutate(lambda = factor(lambda)) %>%
mutate(obs_date = as.Date(obs_date))
solar_line_fits
# look at various lambdas
solar_line_fits %>%
filter(lambda == solar_line_fits$lambda[3])
# dplyr::select only necessary columns
solar_line_fits = solar_line_fits %>%
dplyr::select(lambda,order_idx,obs_date,snr,a1,lam_c1,depth1,width1,b1)
solar_line_fits
gh_fits1 = read.csv(str_c(wd_data, "gh_fits_Vald=0.01_overlapcutoff=3.0e-5_rejectTelluricSlope=10000.csv")) %>%
mutate(obs_date = as.Date(obs_date)) %>%
mutate(lambda = round(lambda,3)) %>%
arrange(lambda)
gh_fits1
gh_fits2 = read.csv(str_c(wd_data, "gh_fits_Vald=0.01_overlapcutoff=3.0e-5_rejectTelluricSlope=10000_DeltaV=6kmps.csv")) %>%
mutate(obs_date = as.Date(obs_date)) %>%
mutate(lambda = round(lambda,3)) %>%
arrange(lambda)
gh_fits2
solar_line_fits %>%
group_by(lambda) %>%
summarize(num = n())
solar_line_fits %>%
group_by(lambda) %>%
summarize(num = n()) %>%
count(num)
gh_fits1 %>%
group_by(lambda) %>%
summarize(num = n())
gh_fits1 %>%
group_by(lambda) %>%
summarize(num = n()) %>%
count(num)
gh_fits2 %>%
group_by(lambda) %>%
summarize(num = n())
gh_fits2 %>%
group_by(lambda) %>%
summarize(num = n()) %>%
count(num)
# get all unique lines in gh_fits1 and solar_line_fits
gh_lambdas = ( gh_fits1 %>% group_by(lambda) %>% summarize(num = n()) )$lambda
solar_lambdas = ( solar_line_fits %>% group_by(lambda) %>% summarize(num = n()) )$lambda
# 0 lines appear in gh_fits1 but not solar_line_fits
length( setdiff(gh_lambdas,solar_lambdas) )
# 517 lines appear in solar_line_fits but not gh_fits
length( setdiff(solar_lambdas,gh_lambdas) )
# 248 lines appear in both solar_line_fits and gh_fits
length( intersect(solar_lambdas,gh_lambdas) )
# get all unique lines in gh_fits2 and solar_line_fits
gh_lambdas = ( gh_fits2 %>% group_by(lambda) %>% summarize(num = n()) )$lambda
solar_lambdas = ( solar_line_fits %>% group_by(lambda) %>% summarize(num = n()) )$lambda
# 0 lines appear in gh_fits2 but not solar_line_fits
length( setdiff(gh_lambdas,solar_lambdas) )
# 517 lines appear in solar_line_fits but not gh_fits2
length( setdiff(solar_lambdas,gh_lambdas) )
# 248 lines sappear in both solar_line_fits and gh_fits2
length( intersect(solar_lambdas,gh_lambdas) )
517+248
# remove unnecessary dataframes
rm(gh_fits1,gh_fits2,repeat_lambdas6kmps,repeat_lambdas10kmps,repeat_lambdas,solar_line_fits,gh_lambdas,solar_lambdas,c_light, line_fits, pixel.df)
?cv.glmnet
# placeholder lm model to find out which categories are non-singular
lm.test = lm(( scaled_final_fits %>% drop_na() )$rv ~ lambda + order_idx + obs_date, data = scaled_final_fits )
# remove non-singular categories and create a dataframe out of them
cat.df = as_tibble( model.matrix(~ lambda + order_idx + obs_date, data = scaled_final_fits %>% drop_na()) ) %>%
dplyr::select(!attributes(alias(lm.test)$Complete)$dimnames[[1]]) %>%
dplyr::select(!"(Intercept)")
rm(lm.test)
# covariates not-including categorical variables
covar.df = scaled_final_fits %>%
dplyr::select(gh_0, gh_2, gh_3, gh_4, gh_5 , gh_6 , gh_7 , gh_8 , gh_9 , gh_10 , gh_11 , gh_12,
snr, a1, depth1, width1, b1) %>%
drop_na()
# combine categorical and non-categorical variables into one matrix
# non-categorical vars appear before categorical vars
Xlasso = data.matrix( cbind(covar.df,cat.df) )
dim(Xlasso)
# number of covariates
n.covar = dim(covar.df)[2]
n.covar
# number of categories
n.cat = ncol(Xlasso) - n.covar
n.cat
# cv lasso, penalty factor means we only have penalties on non-categorical vars
cv_model1 = cv.glmnet(Xlasso,
centered_rv,
penalty.factor = c( rep(1,n.covar), rep(0,n.cat)),
alpha = 1)
# create vector of response variable
centered_rv = ( scaled_final_fits %>% drop_na() )$centered_rv
# cv lasso, penalty factor means we only have penalties on non-categorical vars
cv_model1 = cv.glmnet(Xlasso,
centered_rv,
penalty.factor = c( rep(1,n.covar), rep(0,n.cat)),
alpha = 1)
cv_model1$lambda.min
cv_model1$lambda.lse
plot(cv_model1)
log(cv_model1$lambda.min)
names(cv_model1)
cv_model1$lambda.min
cv_model1$lambda.1se
plot(cv_model1)
log(cv_model1$lambda.1se)
# create the best model using the min lambda
best.model1 = glmnet(Xlasso,
centered_rv,
penalty.factor = c( rep(1,n.covar), rep(0,n.cat)),
alpha = 1,
lambda = cv_model1$lambda.1se)
# look at coeficients of non-cat vars
head( coef(best.model1), n.covar + 1 )
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stringr)
library(readxl)
library(lme4)
library(MASS)
library(gridExtra)
## Data directory
wd_data = "/Users/josephsalzer/research/exostat/neid_solar/"
# read in neid_linefinder
line_fits = read_csv(str_c(wd_data, "neid_linefinder_line_fits.csv")) %>%
rename(fit_lam_c = "fit_λc",
fit_sig2 = "fit_σ²",
chi2_per_dof = "χ²_per_dof") %>%
dplyr::select(line_id, pixels)
line_fits
# create matrix of starting pixel (1st col) and ending pixel (2nd col)
pixel_mat = matrix( as.numeric( str_split(line_fits$pixels, regex(":"), simplify = T) ), ncol = 2, byrow = F )
# create col of middle pixel
line_fits$mid_pixel = ( pixel_mat[,2] + pixel_mat[,1] )/2
# remove pixel_mat
rm(pixel_mat)
# denote m_pixel as the first row's middle pixel
line_fits = line_fits %>%
group_by(line_id) %>%
summarize(m_pixel = mid_pixel[1]) %>%
ungroup()
line_fits
pixel.df = line_fits %>%
right_join(
read_csv(str_c(wd_data, "linelist_20210527_rll_overlap=1_slope=10000_quant=90_norm=cont_mask=3.csv")) %>% dplyr::select(line_id, lambda),
by = "line_id" ) %>%
dplyr::select(!line_id)
pixel.df
hist(pixel.df)
hist(pixel.df$m_pixel)
pixel.df = line_fits %>%
right_join(
read_csv(str_c(wd_data, "linelist_20210527_rll_overlap=1_slope=10000_quant=90_norm=cont_mask=3.csv")) %>% dplyr::select(line_id, lambda, order_idx),
by = "line_id" ) %>%
dplyr::select(!line_id)
pixel.df = line_fits %>%
right_join(
read_csv(str_c(wd_data, "linelist_20210527_rll_overlap=1_slope=10000_quant=90_norm=cont_mask=3.csv")) %>% dplyr::select(line_id, lambda, order),
by = "line_id" ) %>%
dplyr::select(!line_id)
pixel.df
pixel.df %>%
arrange(lambda)
# read in neid_linefinder
line_fits = read_csv(str_c(wd_data, "neid_linefinder_line_fits.csv")) %>%
rename(fit_lam_c = "fit_λc",
fit_sig2 = "fit_σ²",
chi2_per_dof = "χ²_per_dof")
line_fits
# read in neid_linefinder
line_fits = read_csv(str_c(wd_data, "neid_linefinder_line_fits.csv")) %>%
rename(fit_lam_c = "fit_λc",
fit_sig2 = "fit_σ²",
chi2_per_dof = "χ²_per_dof") %>%
dplyr::select(line_id, pixels, chunk_id)
line_fits
